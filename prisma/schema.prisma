generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CourseType {
  RECORDED
  LIVE
}

model Course {
  id          String     @id @default(cuid())
  createdById String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean    @default(false)
  courseType  CourseType @default(RECORDED)
  
  // Live streaming configuration
  agoraChannelName String? // Used for live sessions
  agoraToken      String? // Token for live streaming
  isLiveActive    Boolean @default(false)
  nextLiveDate    DateTime?
  maxParticipants Int?    // Maximum number of participants allowed in live session

  attachments  Attachment[]
  category     Category?    @relation(fields: [categoryId], references: [id])
  categoryId   String?
  chapters     Chapter[]
  schedules    Schedule[]   // New relation for live course schedules
  purchases    Purchase[]
  recordings   LiveSessionRecording[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Schedule {
  id        String   @id @default(cuid())
  time      String   // Store time in HH:mm format
  topic     String
  speaker   String
  position  Int      // For ordering schedule entries
  
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Category {
  id      String   @id @default(cuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id String @id @default(cuid())

  name String
  url  String

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(cuid())
  title       String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)
  
  // Schedule related fields
  startTime   DateTime?  // Start time of the session
  endTime     DateTime?  // End time of the session
  topic       String?    // Topic of the session
  speaker     String?    // Speaker for the session

  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     String
  muxData      MuxData?
  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MuxData {
  id         String  @id @default(cuid())
  assetId    String
  playbackId String?

  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String  @unique
}

model LiveSessionRecording {
  id          String   @id @default(cuid())
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  sessionDate DateTime
  muxAssetId  String
  playbackId  String?
  title       String
  duration    Int?     // Duration in seconds

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model UserProgress {
  id     String @id @default(cuid())
  userId String

  chapter     Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId   String
  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
}

model Purchase {
  id       String  @id @default(cuid())
  userId   String
  isBooked Boolean @default(false)

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}

model StripeCustomer {
  id String @id @default(cuid())

  userid           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
