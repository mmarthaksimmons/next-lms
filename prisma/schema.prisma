generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id               String                 @id @default(cuid())
  createdById      String
  title            String
  description      String?
  imageUrl         String?
  price            Float?
  isPublished      Boolean                @default(false)
  categoryId       String?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  agoraChannelName String?
  agoraToken       String?
  courseType       CourseType             @default(RECORDED)
  isLiveActive     Boolean                @default(false)
  isCourseLive     Boolean                @default(false)
  nextLiveDate     DateTime?
  maxParticipants  Int?
  attachments      Attachment[]
  chapters         Chapter[]
  category         Category?              @relation(fields: [categoryId], references: [id])
  recordings       LiveSessionRecording[]
  purchases        Purchase[]
  schedules        Schedule[]
}

model Schedule {
  id            String   @id @default(cuid())
  topic         String
  speaker       String
  position      Int
  courseId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  scheduledDate DateTime
  course        Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model Category {
  id      String   @id @default(cuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id        String   @id @default(cuid())
  name      String
  url       String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model Chapter {
  id           String         @id @default(cuid())
  title        String
  description  String?
  videoUrl     String?
  isPublished  Boolean        @default(false)
  isFree       Boolean        @default(false)
  courseId     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  position     Int
  endTime      DateTime?
  speaker      String?
  startTime    DateTime?
  topic        String?
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  muxData      MuxData?
  userProgress UserProgress[]
}

model MuxData {
  id         String  @id @default(cuid())
  assetId    String
  playbackId String?
  chapterId  String  @unique
  chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model LiveSessionRecording {
  id          String   @id @default(cuid())
  courseId    String
  sessionDate DateTime
  muxAssetId  String
  playbackId  String?
  title       String
  duration    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model UserProgress {
  id          String   @id @default(cuid())
  userId      String
  chapterId   String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
}

model Purchase {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isBooked  Boolean  @default(false)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model StripeCustomer {
  id               String   @id @default(cuid())
  userid           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

enum CourseType {
  RECORDED
  LIVE
}
